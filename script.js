// Language Management
class LanguageManager {
    constructor() {
        this.currentLang = localStorage.getItem('language') || 'vi';
        this.languages = {
            vi: {
                'title': 'B√πi VƒÉn B√¨nh - Portfolio',
                'name': 'B√πi VƒÉn B√¨nh',
                'nav-home': 'Trang ch·ªß',
                'nav-about': 'Gi·ªõi thi·ªáu',
                'nav-projects': 'D·ª± √°n',
                'nav-skills': 'K·ªπ nƒÉng',
                'nav-contact': 'Li√™n h·ªá',
                'hero-greeting': 'Xin ch√†o, t√¥i l√†',
                'hero-subtitle': 'Frontend Developer & Multimedia Engineer',
                'profile-subtitle': 'Frontend Developer & Multimedia Engineer',
                'hero-description': 'Sinh vi√™n nƒÉm 4 t·∫°i HUST, ƒëam m√™ ph√°t tri·ªÉn web v√† s√°ng t·∫°o giao di·ªán ng∆∞·ªùi d√πng. T√¥i k·∫øt h·ª£p thi·∫øt k·∫ø v√† code ƒë·ªÉ x√¢y d·ª±ng nh·ªØng website tr·ª±c quan, th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng.',
                'btn-view-projects': 'Xem d·ª± √°n',
                'btn-contact': 'Li√™n h·ªá',
                'about-title': 'V·ªÅ t√¥i',
                'about-intro-title': 'Gi·ªõi thi·ªáu',
                'about-intro-1': 'T√¥i l√† sinh vi√™n nƒÉm 4 t·∫°i ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi (HUST), chuy√™n ng√†nh Digital Communication & Multimedia Engineering - Ch∆∞∆°ng tr√¨nh ti√™n ti·∫øn. V·ªõi ni·ªÅm ƒëam m√™ ph√°t tri·ªÉn web v√† t∆∞ duy s√°ng t·∫°o, t√¥i k·∫øt h·ª£p thi·∫øt k·∫ø v√† code ƒë·ªÉ x√¢y d·ª±ng nh·ªØng website tr·ª±c quan, th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng.',
                'about-intro-2': 'T√¥i mong mu·ªën ƒë√≥ng g√≥p v√†o c√°c d·ª± √°n th·ª±c t·∫ø n∆°i t√¥i c√≥ th·ªÉ ph√°t tri·ªÉn th√¥ng qua s·ª± h·ª£p t√°c v√† h·ªçc h·ªèi li√™n t·ª•c.',
                'about-education': 'H·ªçc v·∫•n',
                'about-university': 'ƒê·∫°i h·ªçc B√°ch khoa H√† N·ªôi (HUST)',
                'about-major': 'Digital Communication & Multimedia Engineering',
                'about-graduation': 'D·ª± ki·∫øn t·ªët nghi·ªáp: 2026',
                'about-address': 'ƒê·ªãa ch·ªâ',
                'about-location': 'X√£ ƒê√†n - ƒê·ªëng ƒêa - H√† N·ªôi',
                'about-email': 'Email',
                'projects-title': 'D·ª± √°n',
                'project1-title': 'Monderat Music Player Web',
                'project1-desc': '·ª®ng d·ª•ng web ph√°t nh·∫°c responsive v·ªõi giao di·ªán t√πy ch·ªânh, cho ph√©p ng∆∞·ªùi d√πng ph√°t, t·∫°m d·ª´ng v√† chuy·ªÉn b√†i h√°t.',
                'project2-title': 'Game Online Website',
                'project2-desc': 'N·ªÅn t·∫£ng game tr·ª±c tuy·∫øn tr√™n tr√¨nh duy·ªát cho ph√©p ng∆∞·ªùi d√πng ch∆°i game casual tr·ª±c ti·∫øp tr√™n website. Thi·∫øt k·∫ø ƒë·ªÉ kh√°m ph√° t∆∞∆°ng t√°c th·ªùi gian th·ª±c v√† t√≠ch h·ª£p backend c∆° b·∫£n.',
                'project3-title': 'H·ªá th·ªëng qu·∫£n l√Ω h·ªì s∆° ph√°p l√Ω Blockchain',
                'project3-desc': 'H·ªá th·ªëng qu·∫£n l√Ω t√†i li·ªáu ph√°p l√Ω s·ªë ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh minh b·∫°ch, b·∫£o m·∫≠t v√† to√†n v·∫πn b·∫±ng c√°ch t√≠ch h·ª£p c√¥ng ngh·ªá blockchain.',
                'project4-title': 'AI-powered IELTS Learning Platform',
                'project4-desc': '·ª®ng d·ª•ng web t∆∞∆°ng t√°c gi√∫p ng∆∞·ªùi d√πng luy·ªán t·∫≠p IELTS Speaking b·∫±ng c√°ch cung c·∫•p giao di·ªán s·∫°ch s·∫Ω ƒë·ªÉ ghi √¢m, g·ª≠i v√† xem l·∫°i c√¢u tr·∫£ l·ªùi v·ªõi ph·∫£n h·ªìi AI t·ª©c th√¨.',
                'btn-live-demo': 'Live Demo',
                'skills-title': 'K·ªπ nƒÉng',
                'skills-frontend': 'Frontend',
                'skills-backend': 'Backend',
                'skills-tools': 'Tools & Others',
                'contact-title': 'Li√™n h·ªá',
                'contact-info-title': 'Th√¥ng tin li√™n h·ªá',
                'contact-phone': 'ƒêi·ªán tho·∫°i',
                'contact-github': 'GitHub',
                'contact-form-title': 'G·ª≠i tin nh·∫Øn',
                'chat-title': 'B√πi VƒÉn B√¨nh',
                'chat-status': 'ƒêang ho·∫°t ƒë·ªông',
                'chat-minimize': '_',
                'chat-close': '√ó',
                'chat-welcome': 'Xin ch√†o! üëã T√¥i l√† B√πi VƒÉn B√¨nh. B·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn cho t√¥i qua form b√™n d∆∞·ªõi nh√©!',
                'chat-now': 'V·ª´a xong',
                'form-name': 'H·ªç v√† t√™n',
                'form-email': 'Email',
                'form-subject': 'Ti√™u ƒë·ªÅ',
                'form-message': 'N·ªôi dung tin nh·∫Øn',
                'form-submit': 'G·ª≠i tin nh·∫Øn',
                'form-sending': 'ƒêang g·ª≠i...',
                'form-success': 'C·∫£m ∆°n b·∫°n! Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. T√¥i s·∫Ω li√™n h·ªá l·∫°i s·ªõm nh·∫•t c√≥ th·ªÉ.',
                'form-error': 'C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua email.',
                'form-validation-required': 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!',
                'form-validation-email': 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!'
            },
            en: {
                'title': 'Bui Van Binh - Portfolio',
                'name': 'Bui Van Binh',
                'nav-home': 'Home',
                'nav-about': 'About',
                'nav-projects': 'Projects',
                'nav-skills': 'Skills',
                'nav-contact': 'Contact',
                'hero-greeting': 'Hello, I am',
                'hero-subtitle': 'Frontend Developer & Multimedia Engineer',
                'profile-subtitle': 'Frontend Developer & Multimedia Engineer',
                'hero-description': '4th year student at HUST, passionate about web development and user interface design. I combine design and code to build intuitive, user-friendly websites.',
                'btn-view-projects': 'View Projects',
                'btn-contact': 'Contact',
                'about-title': 'About Me',
                'about-intro-title': 'Introduction',
                'about-intro-1': 'I am a 4th year student at Hanoi University of Science and Technology (HUST), majoring in Digital Communication & Multimedia Engineering - Advanced Program. With a passion for web development and creative thinking, I combine design and code to build intuitive, user-friendly websites.',
                'about-intro-2': 'I aspire to contribute to real-world projects where I can grow through collaboration and continuous learning.',
                'about-education': 'Education',
                'about-university': 'Hanoi University of Science and Technology (HUST)',
                'about-major': 'Digital Communication & Multimedia Engineering',
                'about-graduation': 'Expected graduation: 2026',
                'about-address': 'Address',
                'about-location': 'Xa Dan - Dong Da - Hanoi',
                'about-email': 'Email',
                'projects-title': 'Projects',
                'project1-title': 'Monderat Music Player Web',
                'project1-desc': 'Responsive web music player application with custom interface, allowing users to play, pause and switch songs.',
                'project2-title': 'Game Online Website',
                'project2-desc': 'Online gaming platform on browser allowing users to play casual games directly on the website. Designed to explore real-time interaction and basic backend integration.',
                'project3-title': 'Blockchain Legal Document Management System',
                'project3-desc': 'Digital legal document management system designed to ensure transparency, security and integrity by integrating blockchain technology.',
                'project4-title': 'AI-powered IELTS Learning Platform',
                'project4-desc': 'Interactive web application helping users practice IELTS Speaking by providing a clean interface to record, send and review answers with instant AI feedback.',
                'btn-live-demo': 'Live Demo',
                'skills-title': 'Skills',
                'skills-frontend': 'Frontend',
                'skills-backend': 'Backend',
                'skills-tools': 'Tools & Others',
                'contact-title': 'Contact',
                'contact-info-title': 'Contact Information',
                'contact-phone': 'Phone',
                'contact-github': 'GitHub',
                'contact-form-title': 'Send Message',
                'chat-title': 'B√πi VƒÉn B√¨nh',
                'chat-status': 'Online',
                'chat-minimize': '_',
                'chat-close': '√ó',
                'chat-welcome': 'Hello! üëã I am B√πi VƒÉn B√¨nh. You can send me a message using the form below!',
                'chat-now': 'Just now',
                'form-name': 'Full Name',
                'form-email': 'Email',
                'form-subject': 'Subject',
                'form-message': 'Message Content',
                'form-submit': 'Send Message',
                'form-sending': 'Sending...',
                'form-success': 'Thank you! Your message has been sent successfully. I will contact you as soon as possible.',
                'form-error': 'An error occurred while sending the message. Please try again later or contact directly via email.',
                'form-validation-required': 'Please fill in all required information!',
                'form-validation-email': 'Please enter a valid email!'
            }
        };
        this.init();
    }

    init() {
        this.applyLanguage();
        this.setupEventListeners();
    }

    applyLanguage() {
        // Update HTML lang attribute
        document.documentElement.setAttribute('lang', this.currentLang);
        document.documentElement.setAttribute('data-lang', this.currentLang);
        
        // Update page title
        const titleElement = document.querySelector('title[data-lang-key="title"]');
        if (titleElement) {
            titleElement.textContent = this.languages[this.currentLang]['title'];
        }
        
        // Update all elements with data-lang-key
        document.querySelectorAll('[data-lang-key]').forEach(element => {
            const key = element.getAttribute('data-lang-key');
            if (this.languages[this.currentLang][key]) {
                element.textContent = this.languages[this.currentLang][key];
            }
        });
        
        // Update form placeholders
        this.updateFormPlaceholders();
        
        // Update toggle button
        this.updateToggleButton();
    }

    updateFormPlaceholders() {
        const form = document.getElementById('contactForm');
        if (form) {
            const nameInput = form.querySelector('input[name="name"]');
            const emailInput = form.querySelector('input[name="email"]');
            const subjectInput = form.querySelector('input[name="subject"]');
            const messageInput = form.querySelector('textarea[name="message"]');
            
            if (nameInput) nameInput.placeholder = this.languages[this.currentLang]['form-name'];
            if (emailInput) emailInput.placeholder = this.languages[this.currentLang]['form-email'];
            if (subjectInput) subjectInput.placeholder = this.languages[this.currentLang]['form-subject'];
            if (messageInput) messageInput.placeholder = this.languages[this.currentLang]['form-message'];
        }
    }

    toggleLanguage() {
        this.currentLang = this.currentLang === 'vi' ? 'en' : 'vi';
        localStorage.setItem('language', this.currentLang);
        this.applyLanguage();
        
        // Trigger language change event
        window.dispatchEvent(new CustomEvent('languageChanged', { detail: { language: this.currentLang } }));
    }

    updateToggleButton() {
        const toggleBtn = document.getElementById('languageToggle');
        if (toggleBtn) {
            const viSpan = toggleBtn.querySelector('[data-lang="vi"]');
            const enSpan = toggleBtn.querySelector('[data-lang="en"]');
            
            if (this.currentLang === 'vi') {
                viSpan.style.display = 'block';
                enSpan.style.display = 'none';
                toggleBtn.setAttribute('aria-label', 'Switch to English');
            } else {
                viSpan.style.display = 'none';
                enSpan.style.display = 'block';
                toggleBtn.setAttribute('aria-label', 'Switch to Vietnamese');
            }
        }
    }

    setupEventListeners() {
        const toggleBtn = document.getElementById('languageToggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggleLanguage());
        }
    }

    getCurrentLanguage() {
        return this.currentLang;
    }
}

// Initialize Language Manager
const languageManager = new LanguageManager();

// Loading Screen Manager
class LoadingManager {
    constructor() {
        this.loadingScreen = document.getElementById('loadingScreen');
        this.loadingText = document.getElementById('loadingText');
        this.progressFill = document.getElementById('progressFill');
        this.progressPercent = document.getElementById('progressPercent');
        this.assetsLoaded = document.getElementById('assetsLoaded');
        this.codeCompiled = document.getElementById('codeCompiled');
        this.performanceOpt = document.getElementById('performanceOpt');
        
        this.loadingMessages = [
            'Initializing...',
            'Loading assets...',
            'Compiling code...',
            'Optimizing performance...',
            'Building interface...',
            'Connecting to server...',
            'Finalizing setup...',
            'Almost ready...'
        ];
        
        this.currentMessageIndex = 0;
        this.progress = 0;
        this.isLoading = true;
        
        this.init();
    }

    init() {
        this.startLoadingSequence();
        this.setupParticleEffects();
    }

    startLoadingSequence() {
        // Start typing effect
        this.startTypingEffect();
        
        // Start progress animation
        this.startProgressAnimation();
        
        // Start stats animation
        this.startStatsAnimation();
        
        // Complete loading after 4 seconds
        setTimeout(() => {
            this.completeLoading();
        }, 4000);
    }

    startTypingEffect() {
        const typeText = (text, callback) => {
            let i = 0;
            this.loadingText.textContent = '';
            
            const typeInterval = setInterval(() => {
                if (i < text.length) {
                    this.loadingText.textContent += text.charAt(i);
                    i++;
                } else {
                    clearInterval(typeInterval);
                    setTimeout(callback, 1000);
                }
            }, 100);
        };

        const showNextMessage = () => {
            if (this.currentMessageIndex < this.loadingMessages.length) {
                typeText(this.loadingMessages[this.currentMessageIndex], () => {
                    this.currentMessageIndex++;
                    if (this.isLoading) {
                        showNextMessage();
                    }
                });
            }
        };

        showNextMessage();
    }

    startProgressAnimation() {
        const progressInterval = setInterval(() => {
            if (this.progress < 100) {
                this.progress += Math.random() * 15;
                if (this.progress > 100) this.progress = 100;
                
                this.progressFill.style.width = `${this.progress}%`;
                this.progressPercent.textContent = Math.floor(this.progress);
                
                // Add glitch effect at certain progress points
                if (Math.floor(this.progress) % 25 === 0 && Math.floor(this.progress) > 0) {
                    this.addGlitchEffect();
                }
            } else {
                clearInterval(progressInterval);
            }
        }, 200);
    }

    startStatsAnimation() {
        // Animate assets loaded
        this.animateStat('assetsLoaded', 100, 2000);
        
        // Animate code compiled
        setTimeout(() => {
            this.animateStat('codeCompiled', 100, 1500);
        }, 1000);
        
        // Animate performance optimization
        setTimeout(() => {
            this.animateStat('performanceOpt', 100, 1000);
        }, 2000);
    }

    animateStat(elementId, targetValue, duration) {
        const element = document.getElementById(elementId);
        const startValue = 0;
        const increment = targetValue / (duration / 50);
        let currentValue = startValue;
        
        const statInterval = setInterval(() => {
            currentValue += increment;
            if (currentValue >= targetValue) {
                currentValue = targetValue;
                clearInterval(statInterval);
            }
            
            if (elementId === 'assetsLoaded') {
                element.textContent = `${Math.floor(currentValue)}/100`;
            } else {
                element.textContent = `${Math.floor(currentValue)}%`;
            }
        }, 50);
    }

    addGlitchEffect() {
        const logoLetters = document.querySelectorAll('.logo-letter');
        logoLetters.forEach(letter => {
            letter.style.animation = 'glitch 0.3s ease-in-out';
            setTimeout(() => {
                letter.style.animation = 'logoGlow 2s ease-in-out infinite alternate';
            }, 300);
        });
    }

    setupParticleEffects() {
        // Add random particle movement
        const particles = document.querySelectorAll('.particle');
        particles.forEach((particle, index) => {
            // Random horizontal movement
            const randomX = Math.random() * 20 - 10;
            particle.style.left = `calc(${particle.style.left || '10%'} + ${randomX}px)`;
            
            // Random size variation
            const randomSize = Math.random() * 4 + 2;
            particle.style.width = `${randomSize}px`;
            particle.style.height = `${randomSize}px`;
        });
    }

    completeLoading() {
        this.isLoading = false;
        
        // Final message
        this.loadingText.textContent = 'Ready!';
        this.progressFill.style.width = '100%';
        this.progressPercent.textContent = '100';
        
        // Hide loading screen with animation
        setTimeout(() => {
            this.loadingScreen.classList.add('hide');
            
            // Remove from DOM after animation
            setTimeout(() => {
                this.loadingScreen.style.display = 'none';
                document.body.style.overflow = 'auto';
            }, 500);
        }, 1000);
    }
}

// Initialize Loading Manager when page loads
document.addEventListener('DOMContentLoaded', () => {
    // Prevent scrolling during loading
    document.body.style.overflow = 'hidden';
    
    // Initialize loading manager
    const loadingManager = new LoadingManager();
    
    // Initialize other managers after loading
    setTimeout(() => {
        // Initialize theme manager
        themeManager = new ThemeManager();
        
        // Initialize other components
        initializeComponents();
        
        // Initialize particles
        initializeParticles();
        
        // Initialize scroll animations
        initializeScrollAnimations();
        
        // Initialize chatbox
        initializeChatbox();
    }, 100);
});

// Initialize all components
function initializeComponents() {
    initializeNavigation();
    initializeAnimations();
    initializeFormHandling();
    initializeScrollEffects();
    initializeBackToTop();
    initializeButtonEffects();
    initializeScrollbarStyling();
    initializeActiveNavLinks();
    initializeProjectAnimations();
    initializeSkillsAnimations();
    initializeTypingEffect();
}

// Initialize navigation
function initializeNavigation() {
    // Mobile Navigation Toggle
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');

    if (hamburger && navMenu) {
        hamburger.addEventListener('click', () => {
            hamburger.classList.toggle('active');
            navMenu.classList.toggle('active');
        });

        // Close mobile menu when clicking on a link
        document.querySelectorAll('.nav-link').forEach(n => n.addEventListener('click', () => {
            hamburger.classList.remove('active');
            navMenu.classList.remove('active');
        }));
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

// Theme Management
class ThemeManager {
    constructor() {
        // Set dark theme as default if no theme is saved
        this.theme = localStorage.getItem('theme') || 'dark';
        this.init();
    }

    init() {
        this.applyTheme();
        this.setupEventListeners();
    }

    applyTheme() {
        document.documentElement.setAttribute('data-theme', this.theme);
        this.updateToggleButton();
    }

    toggleTheme() {
        this.theme = this.theme === 'light' ? 'dark' : 'light';
        localStorage.setItem('theme', this.theme);
        this.applyTheme();
        
        // Add smooth transition effect
        document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';
        
        // Trigger theme change event for other components
        window.dispatchEvent(new CustomEvent('themeChanged', { detail: { theme: this.theme } }));
    }

    updateToggleButton() {
        const toggleBtn = document.getElementById('themeToggle');
        if (toggleBtn) {
            if (this.theme === 'dark') {
                toggleBtn.setAttribute('aria-label', 'Switch to light mode');
            } else {
                toggleBtn.setAttribute('aria-label', 'Switch to dark mode');
            }
        }
    }

    setupEventListeners() {
        const toggleBtn = document.getElementById('themeToggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => this.toggleTheme());
        }
    }

    getCurrentTheme() {
        return this.theme;
    }
}

// Initialize Theme Manager
let themeManager;

// Initialize animations
function initializeAnimations() {
    // Intersection Observer for animations
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in-up');
            }
        });
    }, observerOptions);

    // Observe elements for animation
    const animateElements = document.querySelectorAll('.project-card, .skill-item, .detail-item');
    animateElements.forEach(el => observer.observe(el));
}

// Initialize form handling
function initializeFormHandling() {
    // Contact form handling with Formspree
    const contactForm = document.getElementById('contactForm');
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const form = this;
            const formStatus = document.getElementById('formStatus');
            
            // Get form data
            const formData = new FormData(form);
            const name = formData.get('name');
            const email = formData.get('email');
            const subject = formData.get('subject');
            const message = formData.get('message');
            
            // Simple validation
            if (!name || !email || !subject || !message) {
                showFormStatus(languageManager.languages[languageManager.getCurrentLanguage()]['form-validation-required'], 'error');
                return;
            }
            
            // Show loading state
            showFormLoading(form);
            
            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                showFormStatus(languageManager.languages[languageManager.getCurrentLanguage()]['form-validation-email'], 'error');
                return;
            }
            
            // Show loading state (already handled by showFormLoading)
            
            // Submit form to Formspree
            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'Accept': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    showFormStatus(languageManager.languages[languageManager.getCurrentLanguage()]['form-success'], 'success');
                    showFormSuccess(form);
                    form.reset();
                } else {
                    throw new Error('Network response was not ok');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showFormStatus(languageManager.languages[languageManager.getCurrentLanguage()]['form-error'], 'error');
            })
            .finally(() => {
                // Reset button state
                hideFormLoading(form);
            });
        });
    }
}

// Function to show form status messages
function showFormStatus(message, type) {
    const formStatus = document.getElementById('formStatus');
    formStatus.textContent = message;
    formStatus.className = `form-status ${type}`;
    formStatus.style.display = 'block';
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
        formStatus.style.display = 'none';
    }, 5000);
}

// Initialize scroll effects
function initializeScrollEffects() {
    // Navbar background change on scroll
    window.addEventListener('scroll', () => {
        const navbar = document.querySelector('.navbar');
        if (window.scrollY > 100) {
            navbar.style.background = themeManager.getCurrentTheme() === 'dark' 
                ? 'rgba(15, 23, 42, 0.98)' 
                : 'rgba(255, 255, 255, 0.98)';
            navbar.style.boxShadow = themeManager.getCurrentTheme() === 'dark'
                ? '0 2px 20px rgba(0, 0, 0, 0.3)'
                : '0 2px 20px rgba(0, 0, 0, 0.1)';
        } else {
            navbar.style.background = themeManager.getCurrentTheme() === 'dark'
                ? 'rgba(15, 23, 42, 0.95)'
                : 'rgba(255, 255, 255, 0.95)';
            navbar.style.boxShadow = 'none';
        }
    });

    // Update navbar on theme change
    window.addEventListener('themeChanged', (event) => {
        const navbar = document.querySelector('.navbar');
        if (window.scrollY > 100) {
            navbar.style.background = event.detail.theme === 'dark' 
                ? 'rgba(15, 23, 42, 0.98)' 
                : 'rgba(255, 255, 255, 0.98)';
            navbar.style.boxShadow = event.detail.theme === 'dark'
                ? '0 2px 20px rgba(0, 0, 0, 0.3)'
                : '0 2px 20px rgba(0, 0, 0, 0.1)';
        }
    });
}

// Initialize back to top button
function initializeBackToTop() {
    // Back to top button functionality
    function createBackToTopButton() {
        const backToTopBtn = document.createElement('button');
        backToTopBtn.innerHTML = '<i class="fas fa-arrow-up"></i>';
        backToTopBtn.className = 'back-to-top';
        backToTopBtn.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 50px;
            height: 50px;
            background: var(--accent-primary);
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: none;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            box-shadow: 0 4px 12px var(--shadow-medium);
            transition: all 0.3s ease;
            z-index: 1000;
        `;
        
        document.body.appendChild(backToTopBtn);
        
        // Show/hide button based on scroll position
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                backToTopBtn.style.display = 'flex';
            } else {
                backToTopBtn.style.display = 'none';
            }
        });
        
        // Scroll to top when clicked
        backToTopBtn.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
        
        // Hover effects
        backToTopBtn.addEventListener('mouseenter', () => {
            backToTopBtn.style.background = 'var(--accent-hover)';
            backToTopBtn.style.transform = 'translateY(-2px)';
        });
        
        backToTopBtn.addEventListener('mouseleave', () => {
            backToTopBtn.style.background = 'var(--accent-primary)';
            backToTopBtn.style.transform = 'translateY(0)';
        });
    }

    createBackToTopButton();
}

// Initialize button effects
function initializeButtonEffects() {
    // Add loading animation to buttons
    document.querySelectorAll('.btn').forEach(button => {
        button.addEventListener('click', function() {
            if (this.type !== 'submit') {
                this.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    this.style.transform = 'scale(1)';
                }, 150);
            }
        });
    });
}

// Initialize scrollbar styling
function initializeScrollbarStyling() {
    // Theme-aware scrollbar styling
    function updateScrollbarStyle() {
        const isDark = themeManager.getCurrentTheme() === 'dark';
        const scrollbarStyle = document.createElement('style');
        scrollbarStyle.textContent = `
            ::-webkit-scrollbar {
                width: 12px;
            }
            ::-webkit-scrollbar-track {
                background: ${isDark ? '#1e293b' : '#f1f5f9'};
            }
            ::-webkit-scrollbar-thumb {
                background: ${isDark ? '#475569' : '#cbd5e1'};
                border-radius: 6px;
                border: 2px solid ${isDark ? '#1e293b' : '#f1f5f9'};
            }
            ::-webkit-scrollbar-thumb:hover {
                background: ${isDark ? '#64748b' : '#94a3b8'};
            }
        `;
        
        // Remove existing scrollbar style
        const existingStyle = document.querySelector('style[data-scrollbar]');
        if (existingStyle) {
            existingStyle.remove();
        }
        
        scrollbarStyle.setAttribute('data-scrollbar', 'true');
        document.head.appendChild(scrollbarStyle);
    }

    // Update scrollbar when theme changes
    window.addEventListener('themeChanged', updateScrollbarStyle);

    // Initialize scrollbar style
    updateScrollbarStyle();
}

// Initialize active navigation links
function initializeActiveNavLinks() {
    // Active navigation link highlighting
    function updateActiveNavLink() {
        const sections = document.querySelectorAll('section[id]');
        const navLinks = document.querySelectorAll('.nav-link');
        
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (window.scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('active');
            }
        });
    }

    window.addEventListener('scroll', updateActiveNavLink);

    // Add CSS for active nav link
    const style = document.createElement('style');
    style.textContent = `
        .nav-link.active {
            color: var(--accent-primary) !important;
        }
        .nav-link.active::after {
            width: 100% !important;
        }
    `;
    document.head.appendChild(style);
}

// Initialize project animations
function initializeProjectAnimations() {
    // Smooth reveal animation for project cards
    function revealOnScroll() {
        const projectCards = document.querySelectorAll('.project-card');
        projectCards.forEach((card, index) => {
            const cardTop = card.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;
            
            if (cardTop < windowHeight - 100) {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }
        });
    }

    // Initialize project cards with hidden state
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    });

    window.addEventListener('scroll', revealOnScroll);
}

// Initialize skills animations
function initializeSkillsAnimations() {
    // Skills animation on scroll
    function animateSkills() {
        const skillItems = document.querySelectorAll('.skill-item');
        skillItems.forEach((item, index) => {
            const itemTop = item.getBoundingClientRect().top;
            const windowHeight = window.innerHeight;
            
            if (itemTop < windowHeight - 100) {
                setTimeout(() => {
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0) scale(1)';
                }, index * 100);
            }
        });
    }

    // Initialize skills with hidden state
    const skillItems = document.querySelectorAll('.skill-item');
    skillItems.forEach(item => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(30px) scale(0.8)';
        item.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    });

    window.addEventListener('scroll', animateSkills);
}

// Initialize typing effect
function initializeTypingEffect() {
    const typingText = document.getElementById('typingText');
    if (!typingText) return;

    const messages = {
        vi: [
            'Xin ch√†o, t√¥i l√† <span class="highlight">B√πi VƒÉn B√¨nh </span>',
            'T√¥i l√† <span class="highlight">Frontend Developer </span>',

        ],
        en: [
            'Hello, I am <span class="highlight">Bui Van Binh </span>',
            'I am a <span class="highlight">Frontend Developer </span>',
            
        ]
    };

    let currentMessageIndex = 0;
    let currentCharIndex = 0;
    let isDeleting = false;
    let currentLanguage = languageManager.getCurrentLanguage();

    function typeText() {
        const currentMessages = messages[currentLanguage];
        const currentMessage = currentMessages[currentMessageIndex];
        
        if (isDeleting) {
            // Deleting text
            typingText.innerHTML = currentMessage.substring(0, currentCharIndex - 1);
            currentCharIndex--;
        } else {
            // Typing text
            typingText.innerHTML = currentMessage.substring(0, currentCharIndex + 1);
            currentCharIndex++;
        }

        let typeSpeed = isDeleting ? 50 : 100;

        if (!isDeleting && currentCharIndex === currentMessage.length) {
            // Finished typing, wait before deleting
            typeSpeed = 2000;
            isDeleting = true;
        } else if (isDeleting && currentCharIndex === 0) {
            // Finished deleting, move to next message
            isDeleting = false;
            currentMessageIndex = (currentMessageIndex + 1) % currentMessages.length;
            typeSpeed = 500;
        }

        setTimeout(typeText, typeSpeed);
    }

    // Start typing effect
    typeText();

    // Update typing when language changes
    window.addEventListener('languageChanged', (event) => {
        currentLanguage = event.detail.language;
        currentMessageIndex = 0;
        currentCharIndex = 0;
        isDeleting = false;
        typingText.innerHTML = '';
        typeText();
    });
}


// Initialize particles effect
function initializeParticles() {
    const particlesContainer = document.getElementById('heroParticles');
    if (!particlesContainer) return;
    
    const particleCount = 50;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'hero-particle';
        
        // Random position
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 6 + 's';
        particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
        
        particlesContainer.appendChild(particle);
    }
}

// Initialize scroll-triggered animations
function initializeScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
            }
        });
    }, observerOptions);
    
    // Observe all elements with animation classes
    const animatedElements = document.querySelectorAll('.fade-in-up, .fade-in-left, .fade-in-right, .scale-in, .slide-in-bottom');
    animatedElements.forEach(el => observer.observe(el));
}

// Enhanced form loading states
function showFormLoading(form) {
    form.classList.add('form-loading');
    const submitBtn = form.querySelector('button[type="submit"]');
    if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang g·ª≠i...';
    }
}

function hideFormLoading(form) {
    form.classList.remove('form-loading');
    const submitBtn = form.querySelector('button[type="submit"]');
    if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'G·ª≠i tin nh·∫Øn';
    }
}

function showFormSuccess(form) {
    form.classList.add('form-success');
    setTimeout(() => {
        form.classList.remove('form-success');
    }, 600);
}

// Add theme transition to body
document.addEventListener('DOMContentLoaded', () => {
    document.body.style.transition = 'background-color 0.3s ease, color 0.3s ease';
});

// Initialize Chatbox
function initializeChatbox() {
    const chatboxContainer = document.querySelector('.chatbox-container');
    const minimizeBtn = document.querySelector('.chat-control-btn.minimize');
    const closeBtn = document.querySelector('.chat-control-btn.close');
    const chatMessages = document.getElementById('chatMessages');
    const contactForm = document.getElementById('contactForm');
    
    if (!chatboxContainer) return;
    
    // Minimize functionality
    if (minimizeBtn) {
        minimizeBtn.addEventListener('click', () => {
            chatboxContainer.classList.toggle('minimized');
            const isMinimized = chatboxContainer.classList.contains('minimized');
            minimizeBtn.innerHTML = isMinimized ? '<i class="fas fa-plus"></i>' : '<i class="fas fa-minus"></i>';
        });
    }
    
    // Close functionality
    if (closeBtn) {
        closeBtn.addEventListener('click', () => {
            chatboxContainer.style.display = 'none';
        });
    }
    
    // Auto-scroll to bottom when new messages are added
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Add typing indicator
    function addTypingIndicator() {
        const typingMessage = document.createElement('div');
        typingMessage.className = 'message bot-message typing-indicator';
        typingMessage.innerHTML = `
            <div class="message-avatar">
                <img src="anh_CV.jpg" alt="B√πi VƒÉn B√¨nh">
            </div>
            <div class="message-content">
                <div class="message-bubble">
                    <p>ƒêang nh·∫≠p...</p>
                </div>
            </div>
        `;
        chatMessages.appendChild(typingMessage);
        scrollToBottom();
        return typingMessage;
    }
    
    // Remove typing indicator
    function removeTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    // Add bot response
    function addBotResponse(message) {
        const botMessage = document.createElement('div');
        botMessage.className = 'message bot-message';
        botMessage.innerHTML = `
            <div class="message-avatar">
                <img src="anh_CV.jpg" alt="B√πi VƒÉn B√¨nh">
            </div>
            <div class="message-content">
                <div class="message-bubble">
                    <p>${message}</p>
                </div>
                <div class="message-time">
                    <span>V·ª´a xong</span>
                </div>
            </div>
        `;
        chatMessages.appendChild(botMessage);
        scrollToBottom();
    }
    
    // Enhanced form submission with chat-like feedback
    if (contactForm) {
        contactForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(contactForm);
            const name = formData.get('name');
            const message = formData.get('message');
            
            // Add user message to chat
            const userMessage = document.createElement('div');
            userMessage.className = 'message user-message';
            userMessage.innerHTML = `
                <div class="message-content">
                    <div class="message-bubble user-bubble">
                        <p><strong>${name}:</strong> ${message}</p>
                    </div>
                    <div class="message-time">
                        <span>V·ª´a xong</span>
                    </div>
                </div>
            `;
            chatMessages.appendChild(userMessage);
            scrollToBottom();
            
            // Add typing indicator
            const typingIndicator = addTypingIndicator();
            
            // Show loading state
            showFormLoading(contactForm);
            
            try {
                const response = await fetch(contactForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (response.ok) {
                    removeTypingIndicator();
                    addBotResponse('C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ. üìß');
                    showFormSuccess(contactForm);
                } else {
                    throw new Error('Network response was not ok');
                }
            } catch (error) {
                removeTypingIndicator();
                addBotResponse('Xin l·ªói, c√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau! üòÖ');
                showFormStatus('error', 'C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } finally {
                hideFormLoading(contactForm);
            }
        });
    }
    
    // Add some interactive bot responses
    const messageInput = contactForm?.querySelector('textarea[name="message"]');
    if (messageInput) {
        messageInput.addEventListener('input', () => {
            const message = messageInput.value.toLowerCase();
            
            // Clear previous responses
            const existingResponses = document.querySelectorAll('.message.bot-message:not(:first-child)');
            existingResponses.forEach(response => response.remove());
            
            // Add contextual responses
            if (message.includes('xin ch√†o') || message.includes('hello')) {
                setTimeout(() => addBotResponse('Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üëã'), 1000);
            } else if (message.includes('c·∫£m ∆°n') || message.includes('thank')) {
                setTimeout(() => addBotResponse('Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! üòä'), 1000);
            } else if (message.includes('d·ª± √°n') || message.includes('project')) {
                setTimeout(() => addBotResponse('B·∫°n c√≥ th·ªÉ xem c√°c d·ª± √°n c·ªßa t√¥i ·ªü ph·∫ßn Projects ph√≠a tr√™n! üöÄ'), 1000);
            } else if (message.includes('k·ªπ nƒÉng') || message.includes('skill')) {
                setTimeout(() => addBotResponse('T√¥i chuy√™n v·ªÅ Frontend Development v·ªõi React, JavaScript, HTML/CSS! üíª'), 1000);
            }
        });
    }
    
    // Initial scroll to bottom
    scrollToBottom();
}

// Export theme manager for external use
window.themeManager = themeManager; 